cat /etc/shells   --------> To print the type of shells available on our Linux system
#!/bin/bash ----> It means the interpreter should be a bash shell.

#! ------> This is called shebang or hashbang. The shebang plays an important role in shell scripting, especially while dealing with different types of shells.

The shebang is a combination of the #(pound key) and !(exclamation mark). This character combination has a special meaning when it is used in the very first line of the script.
it is used to specify the interpreter with which type the given script will run by default.

----------------------------------------------------------------------------------------------
vi demo.sh
#!/bin/sh
echo "this is first demo shell script"
date
uptime
chmod +x demo.sh
./demo.sh
-----------------------------------------------------------------------------------------------
PROJECT-1 --------> HOW TO INSTALL SOFTWARE IN MULTIPLE FLAVOURS OF OS?

Prerequisite
 What is a variable in a shell script?
 What is the if and else statement is shell script?

#!/bin/sh

echo "install git on linux"
echo "install git process started"

if [ "$(uname)" = "Linux" ];
then
        echo "this is linux update"
        sudo apt-get install git -y
elif [ "$(uname)" = "Darwin" ]
then
        echo "this is not linux"
        echo "install git on macos"
        brew install git

else
        echo "this is not linux"
fi

---------------------------------------------------------------------------------------------------------
Source:  https://www.geeksforgeeks.org/awk-command-unixlinux-examples/

awk -------> awk command is a powerful method for processing or analyzing text or data files,which are organized by lines.
             we can use the awk command as a Linux command and also as a scriptig language like shell 
SYNTAX:--
awk options 'selection _criteria {action }' input-file > output-file

OPTIONS:--
-f program-file : Reads the AWK program source from the file 
                  program-file, instead of from the 
                  first command line argument.
-F fs            : Use fs for the input field separator

awk '{print}' employee.txt -----------> It will print full data in file.
awk '/manager/ {print}' employee.txt   ------------> It prints only the data line which contains manager
awk '{print $1,$4}' employee.txt   ------------> It prints the 1st and 4th words of the lines.

